"""remove values

Revision ID: 47b50647a3cb
Revises: bc88b275bf56
Create Date: 2023-10-16 15:15:35.294510

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "47b50647a3cb"
down_revision = "bc88b275bf56"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("date_values")
    op.drop_table("int_values")
    op.drop_table("str_values")
    op.drop_table("bool_values")
    op.drop_table("float_values")

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.create_table(
        "float_values",
        sa.Column(
            "value",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("group_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("property_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["group_id"], ["groups.id"], name="fk_float_values_group_id_groups"
        ),
        sa.ForeignKeyConstraint(
            ["property_id"],
            ["properties.id"],
            name="fk_float_values_property_id_properties",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_float_values"),
    )
    op.create_table(
        "bool_values",
        sa.Column("value", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("group_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("property_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["group_id"], ["groups.id"], name="fk_bool_values_group_id_groups"
        ),
        sa.ForeignKeyConstraint(
            ["property_id"],
            ["properties.id"],
            name="fk_bool_values_property_id_properties",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_bool_values"),
    )
    op.create_table(
        "str_values",
        sa.Column("value", sa.VARCHAR(length=64), autoincrement=False, nullable=False),
        sa.Column("group_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("property_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["group_id"], ["groups.id"], name="fk_str_values_group_id_groups"
        ),
        sa.ForeignKeyConstraint(
            ["property_id"],
            ["properties.id"],
            name="fk_str_values_property_id_properties",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_str_values"),
        sa.UniqueConstraint("value", name="uq_str_values_value"),
    )
    op.create_table(
        "int_values",
        sa.Column("value", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("group_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("property_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["group_id"], ["groups.id"], name="fk_int_values_group_id_groups"
        ),
        sa.ForeignKeyConstraint(
            ["property_id"],
            ["properties.id"],
            name="fk_int_values_property_id_properties",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_int_values"),
    )
    op.create_table(
        "date_values",
        sa.Column("value", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("group_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("property_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["group_id"], ["groups.id"], name="fk_date_values_group_id_groups"
        ),
        sa.ForeignKeyConstraint(
            ["property_id"],
            ["properties.id"],
            name="fk_date_values_property_id_properties",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_date_values"),
    )
    # ### end Alembic commands ###
